AWSTemplateFormatVersion: "2010-09-09"
Description: User API with Lambda, API Gateway, DynamoDB, and SQS-based async bulk processing

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Description: Environment name (e.g., dev, prod, staging)

Resources:
# DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "UsersV2-${Environment}"
      AttributeDefinitions:
        - AttributeName: ddw_key
          AttributeType: S
        - AttributeName: recordTypeId
          AttributeType: S
      KeySchema:
        - AttributeName: ddw_key
          KeyType: HASH # Partition Key
        - AttributeName: recordTypeId
          KeyType: RANGE # Sort Key
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Environment
          Value: !Ref Environment

  UsersDataEntryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "UsersDataEntry-${Environment}"
      AttributeDefinitions:
        - AttributeName: ddw_key
          AttributeType: S
        - AttributeName: tab_name
          AttributeType: S
      KeySchema:
        - AttributeName: ddw_key
          KeyType: HASH # Partition Key
        - AttributeName: tab_name
          KeyType: RANGE # Sort Key
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Environment
          Value: !Ref Environment

  UsersDataEntryVersionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "UsersDataEntryVersion-${Environment}"
      AttributeDefinitions:
        - AttributeName: ddw_key
          AttributeType: S
        - AttributeName: version_number
          AttributeType: S
      KeySchema:
        - AttributeName: ddw_key
          KeyType: HASH # Composite key: ddw_key#tab_name
        - AttributeName: version_number
          KeyType: RANGE # Sort Key
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Environment
          Value: !Ref Environment

# Permissions
  UserInsertQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "UserInsertQueue-${Environment}"
      VisibilityTimeout: 65

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "UserApiLambdaRole-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllLambdaPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - logs:*
                  - cloudwatch:*
                  - sqs:*
                Resource: "*"

  SQSInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt WorkerLambda.Arn
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt UserInsertQueue.Arn

  SQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt UserInsertQueue.Arn
      FunctionName: !Ref WorkerLambda
      Enabled: true

# Lambda Functions
  CreateUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "create_user-${Environment}"
      Runtime: python3.11
      Handler: create_user.lambda_handler
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "placeholder"}
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable

  ParallelProcessingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "parallel_task-${Environment}"
      Runtime: python3.11
      Handler: parallel_task.lambda_handler
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "placeholder"}
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable

  ProcessingProcessFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "multi_process-${Environment}"
      Runtime: python3.11
      Handler: multi_process.lambda_handler
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "placeholder"}
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable

  BulkCreateUsersFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "bulk_create_user-${Environment}"
      Runtime: python3.11
      Handler: bulk_create_user.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          QUEUE_URL: !Ref UserInsertQueue
          TABLE_NAME: !Ref UsersTable
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "Bulk Create Placeholder"}

  WorkerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "worker_lambda-${Environment}"
      Runtime: python3.11
      Handler: worker_lambda.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 60
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "placeholder"}

  GetUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "get_user-${Environment}"
      Runtime: python3.11
      Handler: get_user.lambda_handler
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "placeholder"}
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable

  DeleteUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "delete_user-${Environment}"
      Runtime: python3.11
      Handler: delete_user.lambda_handler
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "placeholder"}
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable

# API Gateway Resources  
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "UserApi-${Environment}"

  UserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: user

  UserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref UserResource
      PathPart: "{id}"

  BulkUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref UserResource
      PathPart: bulk

  ParallelUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref UserResource
      PathPart: parallel

  ParallelProcessUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref UserResource
      PathPart: parallel_process

# API Gateway Methods
  PostUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUserFunction.Arn}/invocations"

  ParallelProcessMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ParallelUserResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ParallelProcessingFunction.Arn}/invocations"

  ParallelProcessFuncMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ParallelProcessUserResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProcessingProcessFunction.Arn}/invocations"

  BulkUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref BulkUserResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BulkCreateUsersFunction.Arn}/invocations"

  GetUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserFunction.Arn}/invocations"

  DeleteUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteUserFunction.Arn}/invocations"

# API Gateway Deployment
  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PostUserMethod
      - GetUserMethod
      - DeleteUserMethod
      - BulkUserMethod
      - ParallelProcessMethod
      - ParallelProcessFuncMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

# Lambda Permissions
  LambdaInvokePermissionsCreate:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateUserFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

  LambdaInvokePermissionsCreateParallel:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ParallelProcessingFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

  LambdaInvokePermissionsCreateParallelFunc:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ProcessingProcessFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

  LambdaInvokePermissionsBulk:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BulkCreateUsersFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

  LambdaInvokePermissionsGet:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetUserFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

  LambdaInvokePermissionsDelete:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DeleteUserFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

# Glue Resources
  GlueScriptBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "glue-scripts-${Environment}-${AWS::AccountId}-${AWS::Region}"
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Environment
          Value: !Ref Environment

# Glue Job Role
  GlueJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "GlueJobRole-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: GlueS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::glue-scripts-${Environment}-${AWS::AccountId}-${AWS::Region}"
                  - !Sub "arn:aws:s3:::glue-scripts-${Environment}-${AWS::AccountId}-${AWS::Region}/*"

        - PolicyName: GlueJobManagement
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - glue:CreateJob
                  - glue:ListJobs
                  - glue:DeleteJob
                  - glue:GetJob
                  - glue:UpdateJob
                  - glue:StartJobRun
                  - glue:GetJobRun
                Resource: "*"

# Glue Job
  UserETLGlueJob:
    Type: AWS::Glue::Job
    Properties:
      Name: !Sub "user-etl-job-${Environment}"
      Role: !GetAtt GlueJobRole.Arn
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://glue-scripts-${Environment}-${AWS::AccountId}-${AWS::Region}/glue-scripts/user_etl.py"
        PythonVersion: 3
      DefaultArguments:
        "--TempDir": !Sub "s3://glue-scripts-${Environment}-${AWS::AccountId}-${AWS::Region}/glue-temp/"
        "--job-language": "python"
        "--enable-metrics": "true"
        "--ENVIRONMENT": !Ref Environment
        "--TABLE_NAME": !Ref UsersTable
      GlueVersion: "4.0"
      MaxCapacity: 5
      Timeout: 60
      MaxRetries: 2

# Outputs
Outputs:
  ApiBaseURL:
    Description: "Base URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"

  LambdaExecutionRole:
    Description: "Lambda Role ARN"
    Value: !GetAtt LambdaRole.Arn

  GlueJobName:
    Description: Name of the Glue job
    Value: !Ref UserETLGlueJob

  GlueBucketName:
    Description: Bucket used for Glue script and temp storage
    Value: !Ref GlueScriptBucket
