AWSTemplateFormatVersion: '2010-09-09'
Description: User API with Lambda, API Gateway, and DynamoDB

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Description: Environment name (e.g., dev, prod, staging)

Resources:

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "Users-${Environment}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Environment
          Value: !Ref Environment

# IAM Role for all Lambda functions

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "UserApiLambdaRole-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - logs:*
                  - cloudwatch:*
                Resource: "*"

### Lambda Functions

  CreateUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "create_user-${Environment}"
      Runtime: python3.11
      Handler: create_user.lambda_handler
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "placeholder"}
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable

  BulkCreateUsersFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "bulk_create_user-${Environment}"
      Runtime: python3.11
      Handler: bulk_create_user.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "Bulk Create Placeholder"}


  GetUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "get_user-${Environment}"
      Runtime: python3.11
      Handler: get_user.lambda_handler
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "placeholder"}
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable

  DeleteUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "delete_user-${Environment}"
      Runtime: python3.11
      Handler: delete_user.lambda_handler
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "placeholder"}
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable

### API Gateway

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "UserApi-${Environment}"

  UserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: user

  UserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref UserResource
      PathPart: "{id}"

  BulkUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref UserResource  # This means /user is the parent
      PathPart: bulk               # So full path becomes /user/bulk

  ### API Methods
  PostUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUserFunction.Arn}/invocations"

  BulkUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref BulkUserResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BulkCreateUsersFunction.Arn}/invocations"


  GetUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserFunction.Arn}/invocations"

  DeleteUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteUserFunction.Arn}/invocations"

### Deployment + Stage

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PostUserMethod
      - GetUserMethod
      - DeleteUserMethod
      - BulkUserMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment


### Permissions for API Gateway to invoke Lambdas

  LambdaInvokePermissionsCreate:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateUserFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

  LambdaInvokePermissionsBulk:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BulkCreateUsersFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

  LambdaInvokePermissionsGet:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetUserFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

  LambdaInvokePermissionsDelete:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DeleteUserFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"


Outputs:
  ApiBaseURL:
    Description: "Base URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"

  LambdaExecutionRole:
    Description: "Lambda Role ARN"
    Value: !GetAtt LambdaRole.Arn