AWSTemplateFormatVersion: '2010-09-09'
Description: User API with Lambda, API Gateway, and DynamoDB

Parameters:
  Environment:
    Type: String
    Default: dev

Resources:

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "Users-${Environment}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "UserApiLambdaRole-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: "*"

  CreateUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "CreateUser-${Environment}"
      Runtime: python3.11
      Handler: create_user.lambda_handler
      Code:
        S3Bucket: aws-lambda-deploy-somesh-123
        S3Key: lambda/create_user.zip
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable

  GetUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "GetUser-${Environment}"
      Runtime: python3.11
      Handler: get_user.lambda_handler
      Code:
        S3Bucket: aws-lambda-deploy-somesh-123
        S3Key: lambda/get_user.zip
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable

  DeleteUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "DeleteUser-${Environment}"
      Runtime: python3.11
      Handler: delete_user.lambda_handler
      Code:
        S3Bucket: aws-lambda-deploy-somesh-123
        S3Key: lambda/delete_user.zip
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "UserApi-${Environment}"

  UserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: user

  UserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref UserResource
      PathPart: "{id}"

  PostUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUserFunction.Arn}/invocations"

  GetUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserFunction.Arn}/invocations"

  DeleteUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteUserFunction.Arn}/invocations"

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PostUserMethod
      - GetUserMethod
      - DeleteUserMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  LambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateUserFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

Outputs:
  ApiEndpoint:
    Description: "Base URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/user"
