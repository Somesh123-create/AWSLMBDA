name: Deploy to AWS Lambda without S3

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-2
  STACK_NAME: user-api-stack
  ENV_SUFFIX: dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
  
    - name: Zip All Lambda Functions
      run: |
        mkdir -p zipped
        for file in lambda/*.py; do
          fname=$(basename "$file" .py)
          zip -j "zipped/${fname}.zip" "$file"
        done
    
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    
    - name: Create Virtualenv and Install Dependencies
      run: |
        python3.11 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build Lambda Layer from Virtualenv
      run: |
        mkdir -p layer/python
        cp -r venv/lib/python3.11/site-packages/* layer/python/
        cd layer
        zip -r ../python-libs-layer.zip .
        cd ..

    - name: Publish Lambda Layer
      id: publish_layer
      run: |
        LAYER_ARN=$(aws lambda publish-layer-version \
          --layer-name python-libs-layer-${{ env.ENV_SUFFIX }} \
          --compatible-runtimes python3.11 \
          --zip-file fileb://python-libs-layer.zip \
          --region ${{ env.AWS_REGION }} \
          --query 'LayerVersionArn' --output text)
        echo "LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV

    - name: Delete failed stack if exists
      run: |
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].StackStatus" --output text || echo "NOT_FOUND")
        if [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" ]]; then
          aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }}
          aws cloudformation wait stack-delete-complete --stack-name ${{ env.STACK_NAME }}
        fi

    - name: Deploy Infrastructure via CloudFormation
      run: |
        aws cloudformation deploy \
          --template-file template.yaml \
          --stack-name ${{ env.STACK_NAME }} \
          --capabilities CAPABILITY_NAMED_IAM \
          --no-fail-on-empty-changeset \
          --parameter-overrides Environment=${{ env.ENV_SUFFIX }} \
          --region  ${{ env.AWS_REGION }}

    - name: Update All Lambda Functions
      run: |
        for zipfile in zipped/*.zip; do
          fname=$(basename "$zipfile" .zip)
          function_name="${fname}-${{ env.ENV_SUFFIX }}"
          echo "Updating Lambda: $function_name"
          
          aws lambda update-function-code \
            --function-name "$function_name" \
            --zip-file "fileb://$zipfile" \
            --region ${{ env.AWS_REGION }}
        done
    
    - name: Attach Latest Layer to Functions
      run: |
        for zipfile in zipped/*.zip; do
          fname=$(basename "$zipfile" .zip)
          func="${fname}-${{ env.ENV_SUFFIX }}"
          echo "ðŸ”„ Attaching layer to: $func"
          aws lambda update-function-configuration \
            --function-name "$func" \
            --layers "${{ env.LAYER_ARN }}" \
            --region ${{ env.AWS_REGION }}
        done


    - name: Show API Base URL
      run: |
        aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }} \
          --query "Stacks[0].Outputs[?OutputKey=='ApiBaseURL'].OutputValue" \
          --output text